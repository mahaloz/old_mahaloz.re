import time

#CTF{n0w_ev3n_pr1n7f_1s_7ur1ng_c0mpl3te}

s = """0x7000:	0x0001	0x0001	0x0000	0x0000	0x0001	0x0000	0x0001	0x0000
0x7010:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001
0x7020:	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001	0x0001	0x0000
0x7030:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000
0x7040:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001
0x7050:	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001	0x0001	0x0000
0x7060:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001
0x7070:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001
0x7080:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001	0x0001	0x0000
0x7090:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000
0x70a0:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001
0x70b0:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001
0x70c0:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000
0x70d0:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001
0x70e0:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001
0x70f0:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000
0x7100:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001
0x7110:	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001
0x7120:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000
0x7130:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001
0x7140:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001	0x0001	0x0000
0x7150:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001
0x7160:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001
0x7170:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000
0x7180:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000
0x7190:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001
0x71a0:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001
0x71b0:	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000
0x71c0:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0000	0x0001	0x0001
0x71d0:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001	0x0001	0x0000
0x71e0:	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001	0x0001	0x0001
0x71f0:	0x0001	0x0001	0x0001	0x0000	0x0001	0x0001	0x0001	0x0001"""

red_mapping = {}
lines = s.splitlines()
addr = 0x7000
for line in lines:
    for val in line.split()[1:]:
        red_mapping[hex(addr)] = int(val, 16)
        addr += 2

byte_array = [0xCC, 0xB0, 0xE7, 0x7B, 0xBC, 0xC0, 0xEE, 0x3A, 0xFC, 0x73, 0x81, 0xD0, 0x7A, 0x69, 0x84, 0xE2, 0x48, 0xE3, 0xD7, 0x59, 0x11, 0x6B, 0xF1, 0xB3, 0x86, 0x0B, 0x89, 0xC5, 0xBF, 0x53, 0x65, 0x65, 0xF0, 0xEF, 0x6A, 0xBF, 0x08, 0x78, 0xC4, 0x2C, 0x99, 0x35, 0x3C, 0x6C, 0xDC, 0xE0, 0xC8, 0x99, 0xC8, 0x3B, 0xEF, 0x29, 0x97, 0x0B, 0xB3, 0x8B, 0xCC, 0x9D, 0xFC, 0x05, 0x1B, 0x67, 0xB5, 0xAD, 0x15, 0xC1, 0x08, 0xD0, 0x45, 0x45, 0x26, 0x43, 0x45, 0x6D, 0xF4, 0xEF, 0xBB, 0x49, 0x06, 0xCA, 0x73, 0x6B, 0xBC, 0xE9, 0x50, 0x97, 0x05, 0xE5, 0x97, 0xD3, 0xB5, 0x47, 0x2B, 0xAD, 0x25, 0x8B, 0xAE, 0xAF, 0x41, 0xE5, 0xD8, 0x14, 0xF4, 0x83, 0xE6, 0xF0, 0xC0, 0x98, 0x0A, 0xAC, 0xA1, 0x95, 0xF5, 0xB5, 0xD3, 0x53, 0xF0, 0x97, 0xEF, 0x9D, 0xD4, 0x3B, 0x3B, 0x0B, 0xE7, 0x17, 0x07, 0x1F, 0x6C, 0xF1, 0x1E, 0x44, 0x92, 0xB2, 0x57, 0x07, 0xB7, 0x36, 0x8F, 0x53, 0xC9, 0xEA, 0x10, 0x90, 0x62, 0xDF, 0x1D, 0x07, 0xB3, 0x71, 0x53, 0x61, 0x1A, 0x2B, 0x78, 0xBF, 0xC1, 0xB5, 0xC6, 0x3B, 0xEA, 0x2B, 0x44, 0x17, 0xA0, 0x84, 0xCA, 0x8F, 0xB7, 0x3B, 0x38, 0x2F, 0xE8, 0x73, 0x84, 0xAD, 0x44, 0xEF, 0xF8, 0xAD, 0x8C, 0x1F, 0xEA, 0x7F, 0xCD, 0xC5, 0xB3, 0x49, 0x05, 0x03, 0x95, 0xA7, 0x44, 0xB5, 0x91, 0x69, 0xF8, 0x95, 0x6C, 0xE5, 0x87, 0x53, 0x4E, 0x47, 0x92, 0xBE, 0x80, 0xD0, 0x80, 0x1D, 0xAD, 0xF1, 0x3D, 0xE3, 0xDF, 0x35, 0x61, 0xF1, 0xE7, 0x0D, 0x71, 0xC5, 0x02, 0x4F, 0x20, 0x5E, 0xA2, 0x8B, 0xC4, 0x61, 0x32, 0x0F, 0xA8, 0xBE, 0x7E, 0x29, 0xD1, 0x6D, 0x2A, 0xD9, 0x55, 0x47, 0x07, 0x83, 0xEA, 0x2B, 0x79, 0x95, 0x4F, 0x3D, 0xA3, 0x11, 0xDD, 0xC1, 0x1D, 0x89]

count_ref = [0x83, 0x01, 0xAF, 0x49, 0xAD, 0xC1, 0x0F, 0x8B, 0xE1]
good_pos = [0x100-x for x in count_ref]

grid = []

def init_grid():
    for i in range(0x10):
        line = [" "]*0x11
        line[-1] = '*'
        grid.append(line)
    line = ["*"]*0x11
    grid.append(line)

def draw_layout():
    for x in range(0x10):
        for y in range(0x10):
            pos = (x << 4) | y
            is_bad = red_mapping[hex(0x7000+2*byte_array[pos])]
            grid[x][y] = '*' if is_bad else " "

def clear_console():
    print(chr(27)+'[2j')
    print('\033c')
    print('\x1bc')

def display_grid():
    clear_console()
    for x in range(0x11):
        print('\t\t'+''.join(grid[x]))

def draw_char(x, y):
    grid[x][y] = 'X'

def erase_char(x, y):
    grid[x][y] = ' '

def draw_good():
    for i in range(len(good_pos)):
        good = good_pos[i]
        x = (good >> 4)
        y = (good & 0x0f)
        assert grid[x][y] == ' '
        grid[x][y] = str(i+1)

X = 1
Y = 1
def interpret(ir):
    global X, Y
    display_grid()
    erase_char(X, Y)
    for op in ir:
        if op == 'u':
            X -= 1
            assert X > 0
        elif op == 'r':
            Y += 1
            assert Y < 0x10
        elif op == 'd':
            X += 1
            assert X < 0x10
        elif op == 'l':
            Y -= 1
            assert Y > 0
        else:
            raise ValueError("unknown op %s" % op)
        assert grid[X][Y] != '*'
        draw_char(X, Y)
        display_grid()
        erase_char(X, Y)
        time.sleep(0.2)
    draw_char(X, Y)

# initialize the grid
init_grid()
draw_layout()
draw_char(X, Y)
draw_good()

interpret("ddrrrrrrddrrrrrrrrddllrruullllllllddddllllllddddrrrrrrrruurrddrrddrrlluulluullddlllllllluuuurrrrrruuuuuulllllldduurrrrrrddddddllllllddddrrrrrruuddlllllluuuuuurruuddllddrrrrrruuuurrrrrruurrllddllllllddddllllllddddrrddllrruulluuuurrrrrruullrruurruuuurrrrrr")

display_grid()

